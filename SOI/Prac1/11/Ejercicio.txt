El archivo skel_server.c implementa un pequeño servidor que recibe
conexiones por un puerto TCP (4040) y responde a cada pedido con un entero único. Los pedidos, enviados
por los clientes, son simplemente una línea NUEVO terminada por \n. Para cerrar una conexión, el cliente
envía CHAU.

Como está escrito, el servidor sólo puede atender a un cliente a la vez, dejando en espera a todo el resto
hasta que se cierre la conexión con el primer cliente.

Para recibir conexiones TCP, el proceso debe:

    Llamar a socket(AF_INET, SOCK_STREAM, 0) para conseguir un socket (un fd)

    Usar bind para asociarlo a un puerto.

    Usar listen para permitir que acepte conexiones

    Llamar a accept ahora bloquea hasta que se reciba una conexión.
    accept devuelve un fd representando a la conexión, y puede usar read/write sobre el mismo.

a) Modifique el servidor para atender concurrentemente a todas las conexiones abiertas levantando un
nuevo proceso por cada conexi´on. Nota: todos los clientes deber´an poder hacer pedidos sin esperar a
otros, y siempre debe poder conectarse un nuevo cliente.

b) Use memoria compartida entre los procesos para mantener el ´ultimo entero enviado a un cliente.
¿Qu´e necesita tener en cuenta para garantizar que dos pedidos nunca reciben el mismo entero?